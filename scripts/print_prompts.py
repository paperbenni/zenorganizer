#!/usr/bin/env python3
"""
Utility to print system prompts generated by the agents for debugging.

Usage:
  python scripts/print_prompts.py [--all] [agent_name]

Examples:
  python scripts/print_prompts.py --all
  python scripts/print_prompts.py chat
"""
from __future__ import annotations

import argparse
from datetime import datetime
import os
import dotenv

dotenv.load_dotenv()

from zeno import agents


def print_time_prompt() -> None:
    # replicate attach_time_prompt behavior
    from zeno.agents import attach_time_prompt

    class DummyAgent:
        def __init__(self):
            self._prompts = []

        def system_prompt(self, fn):
            # call the function with a dummy RunContext if it expects one
            try:
                val = fn(None)
            except TypeError:
                val = fn()
            self._prompts.append(val)
            return fn

    a = DummyAgent()
    attach_time_prompt(a)  # type: ignore
    for p in a._prompts:
        print(p)


def print_memories_prompt() -> None:
    from zeno.agents import attach_memories_prompt

    class DummyAgent:
        def __init__(self):
            self._prompts = []

        def system_prompt(self, fn):
            try:
                val = fn(None)
            except TypeError:
                val = fn()
            self._prompts.append(val)
            return fn

    a = DummyAgent()
    attach_memories_prompt(a)  # type: ignore
    for p in a._prompts:
        print(p)


def print_agent_system_prompts(name: str) -> None:
    builders = {
        "chat": agents.build_chat_agent,
        "splitter": agents.build_splitter_agent,
        "aggregator": agents.build_aggregator_agent,
        "deduplicator": agents.build_deduplicator_agent,
        "garbage": agents.build_garbage_collector_agent,
        "reminder": agents.build_reminder_agent,
    }
    if name not in builders:
        print(f"Unknown agent: {name}")
        return

    agent = builders[name]()
    # Try to inspect common attributes for system prompts
    prompts = []
    if hasattr(agent, "system_prompt"):
        prompts.append(getattr(agent, "system_prompt"))
    # Many libs store prompts in private attrs; try a few heuristics
    for attr in ("_system_prompt", "system_prompts", "system_prompt_text"):
        if hasattr(agent, attr):
            prompts.append(getattr(agent, attr))

    if not prompts:
        print("No inspectable system prompts found on Agent object; the library may store them elsewhere or generate them per-run.")
        return

    for p in prompts:
        print(p)


def main() -> None:
    parser = argparse.ArgumentParser()
    parser.add_argument("agent", nargs="?", help="Agent name to inspect (chat, splitter, aggregator, deduplicator, garbage, reminder)")
    parser.add_argument("--all", action="store_true", help="Print all available prompt outputs")
    args = parser.parse_args()

    if args.all:
        print("--- Time Prompt ---")
        print_time_prompt()
        print("\n--- Memories Prompt ---")
        print_memories_prompt()
        return

    if args.agent:
        print_agent_system_prompts(args.agent)
        return

    parser.print_help()


if __name__ == "__main__":
    main()


